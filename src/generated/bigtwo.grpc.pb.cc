// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: bigtwo.proto

#include "bigtwo.pb.h"
#include "bigtwo.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace bigtwo {

static const char* BigTwoService_method_names[] = {
  "/bigtwo.BigTwoService/PlayCards",
  "/bigtwo.BigTwoService/Pass",
  "/bigtwo.BigTwoService/GetGameState",
  "/bigtwo.BigTwoService/JoinGame",
  "/bigtwo.BigTwoService/Chat",
  "/bigtwo.BigTwoService/StartGame",
};

std::unique_ptr< BigTwoService::Stub> BigTwoService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< BigTwoService::Stub> stub(new BigTwoService::Stub(channel, options));
  return stub;
}

BigTwoService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_PlayCards_(BigTwoService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Pass_(BigTwoService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetGameState_(BigTwoService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_JoinGame_(BigTwoService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Chat_(BigTwoService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StartGame_(BigTwoService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status BigTwoService::Stub::PlayCards(::grpc::ClientContext* context, const ::bigtwo::PlayRequest& request, ::bigtwo::PlayResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bigtwo::PlayRequest, ::bigtwo::PlayResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PlayCards_, context, request, response);
}

void BigTwoService::Stub::async::PlayCards(::grpc::ClientContext* context, const ::bigtwo::PlayRequest* request, ::bigtwo::PlayResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bigtwo::PlayRequest, ::bigtwo::PlayResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PlayCards_, context, request, response, std::move(f));
}

void BigTwoService::Stub::async::PlayCards(::grpc::ClientContext* context, const ::bigtwo::PlayRequest* request, ::bigtwo::PlayResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PlayCards_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bigtwo::PlayResponse>* BigTwoService::Stub::PrepareAsyncPlayCardsRaw(::grpc::ClientContext* context, const ::bigtwo::PlayRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bigtwo::PlayResponse, ::bigtwo::PlayRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PlayCards_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bigtwo::PlayResponse>* BigTwoService::Stub::AsyncPlayCardsRaw(::grpc::ClientContext* context, const ::bigtwo::PlayRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPlayCardsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BigTwoService::Stub::Pass(::grpc::ClientContext* context, const ::bigtwo::PassRequest& request, ::bigtwo::PassResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bigtwo::PassRequest, ::bigtwo::PassResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Pass_, context, request, response);
}

void BigTwoService::Stub::async::Pass(::grpc::ClientContext* context, const ::bigtwo::PassRequest* request, ::bigtwo::PassResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bigtwo::PassRequest, ::bigtwo::PassResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Pass_, context, request, response, std::move(f));
}

void BigTwoService::Stub::async::Pass(::grpc::ClientContext* context, const ::bigtwo::PassRequest* request, ::bigtwo::PassResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Pass_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bigtwo::PassResponse>* BigTwoService::Stub::PrepareAsyncPassRaw(::grpc::ClientContext* context, const ::bigtwo::PassRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bigtwo::PassResponse, ::bigtwo::PassRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Pass_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bigtwo::PassResponse>* BigTwoService::Stub::AsyncPassRaw(::grpc::ClientContext* context, const ::bigtwo::PassRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPassRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BigTwoService::Stub::GetGameState(::grpc::ClientContext* context, const ::bigtwo::GameStateRequest& request, ::bigtwo::GameStateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bigtwo::GameStateRequest, ::bigtwo::GameStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetGameState_, context, request, response);
}

void BigTwoService::Stub::async::GetGameState(::grpc::ClientContext* context, const ::bigtwo::GameStateRequest* request, ::bigtwo::GameStateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bigtwo::GameStateRequest, ::bigtwo::GameStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetGameState_, context, request, response, std::move(f));
}

void BigTwoService::Stub::async::GetGameState(::grpc::ClientContext* context, const ::bigtwo::GameStateRequest* request, ::bigtwo::GameStateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetGameState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bigtwo::GameStateResponse>* BigTwoService::Stub::PrepareAsyncGetGameStateRaw(::grpc::ClientContext* context, const ::bigtwo::GameStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bigtwo::GameStateResponse, ::bigtwo::GameStateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetGameState_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bigtwo::GameStateResponse>* BigTwoService::Stub::AsyncGetGameStateRaw(::grpc::ClientContext* context, const ::bigtwo::GameStateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetGameStateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BigTwoService::Stub::JoinGame(::grpc::ClientContext* context, const ::bigtwo::JoinRequest& request, ::bigtwo::JoinResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bigtwo::JoinRequest, ::bigtwo::JoinResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_JoinGame_, context, request, response);
}

void BigTwoService::Stub::async::JoinGame(::grpc::ClientContext* context, const ::bigtwo::JoinRequest* request, ::bigtwo::JoinResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bigtwo::JoinRequest, ::bigtwo::JoinResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_JoinGame_, context, request, response, std::move(f));
}

void BigTwoService::Stub::async::JoinGame(::grpc::ClientContext* context, const ::bigtwo::JoinRequest* request, ::bigtwo::JoinResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_JoinGame_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bigtwo::JoinResponse>* BigTwoService::Stub::PrepareAsyncJoinGameRaw(::grpc::ClientContext* context, const ::bigtwo::JoinRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bigtwo::JoinResponse, ::bigtwo::JoinRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_JoinGame_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bigtwo::JoinResponse>* BigTwoService::Stub::AsyncJoinGameRaw(::grpc::ClientContext* context, const ::bigtwo::JoinRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncJoinGameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BigTwoService::Stub::Chat(::grpc::ClientContext* context, const ::bigtwo::ChatRequest& request, ::bigtwo::ChatResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bigtwo::ChatRequest, ::bigtwo::ChatResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Chat_, context, request, response);
}

void BigTwoService::Stub::async::Chat(::grpc::ClientContext* context, const ::bigtwo::ChatRequest* request, ::bigtwo::ChatResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bigtwo::ChatRequest, ::bigtwo::ChatResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Chat_, context, request, response, std::move(f));
}

void BigTwoService::Stub::async::Chat(::grpc::ClientContext* context, const ::bigtwo::ChatRequest* request, ::bigtwo::ChatResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Chat_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bigtwo::ChatResponse>* BigTwoService::Stub::PrepareAsyncChatRaw(::grpc::ClientContext* context, const ::bigtwo::ChatRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bigtwo::ChatResponse, ::bigtwo::ChatRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Chat_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bigtwo::ChatResponse>* BigTwoService::Stub::AsyncChatRaw(::grpc::ClientContext* context, const ::bigtwo::ChatRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncChatRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BigTwoService::Stub::StartGame(::grpc::ClientContext* context, const ::bigtwo::StartGameRequest& request, ::bigtwo::StartGameResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bigtwo::StartGameRequest, ::bigtwo::StartGameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StartGame_, context, request, response);
}

void BigTwoService::Stub::async::StartGame(::grpc::ClientContext* context, const ::bigtwo::StartGameRequest* request, ::bigtwo::StartGameResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bigtwo::StartGameRequest, ::bigtwo::StartGameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartGame_, context, request, response, std::move(f));
}

void BigTwoService::Stub::async::StartGame(::grpc::ClientContext* context, const ::bigtwo::StartGameRequest* request, ::bigtwo::StartGameResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartGame_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bigtwo::StartGameResponse>* BigTwoService::Stub::PrepareAsyncStartGameRaw(::grpc::ClientContext* context, const ::bigtwo::StartGameRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bigtwo::StartGameResponse, ::bigtwo::StartGameRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StartGame_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bigtwo::StartGameResponse>* BigTwoService::Stub::AsyncStartGameRaw(::grpc::ClientContext* context, const ::bigtwo::StartGameRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStartGameRaw(context, request, cq);
  result->StartCall();
  return result;
}

BigTwoService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BigTwoService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BigTwoService::Service, ::bigtwo::PlayRequest, ::bigtwo::PlayResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BigTwoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bigtwo::PlayRequest* req,
             ::bigtwo::PlayResponse* resp) {
               return service->PlayCards(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BigTwoService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BigTwoService::Service, ::bigtwo::PassRequest, ::bigtwo::PassResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BigTwoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bigtwo::PassRequest* req,
             ::bigtwo::PassResponse* resp) {
               return service->Pass(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BigTwoService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BigTwoService::Service, ::bigtwo::GameStateRequest, ::bigtwo::GameStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BigTwoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bigtwo::GameStateRequest* req,
             ::bigtwo::GameStateResponse* resp) {
               return service->GetGameState(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BigTwoService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BigTwoService::Service, ::bigtwo::JoinRequest, ::bigtwo::JoinResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BigTwoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bigtwo::JoinRequest* req,
             ::bigtwo::JoinResponse* resp) {
               return service->JoinGame(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BigTwoService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BigTwoService::Service, ::bigtwo::ChatRequest, ::bigtwo::ChatResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BigTwoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bigtwo::ChatRequest* req,
             ::bigtwo::ChatResponse* resp) {
               return service->Chat(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BigTwoService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BigTwoService::Service, ::bigtwo::StartGameRequest, ::bigtwo::StartGameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BigTwoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bigtwo::StartGameRequest* req,
             ::bigtwo::StartGameResponse* resp) {
               return service->StartGame(ctx, req, resp);
             }, this)));
}

BigTwoService::Service::~Service() {
}

::grpc::Status BigTwoService::Service::PlayCards(::grpc::ServerContext* context, const ::bigtwo::PlayRequest* request, ::bigtwo::PlayResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BigTwoService::Service::Pass(::grpc::ServerContext* context, const ::bigtwo::PassRequest* request, ::bigtwo::PassResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BigTwoService::Service::GetGameState(::grpc::ServerContext* context, const ::bigtwo::GameStateRequest* request, ::bigtwo::GameStateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BigTwoService::Service::JoinGame(::grpc::ServerContext* context, const ::bigtwo::JoinRequest* request, ::bigtwo::JoinResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BigTwoService::Service::Chat(::grpc::ServerContext* context, const ::bigtwo::ChatRequest* request, ::bigtwo::ChatResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BigTwoService::Service::StartGame(::grpc::ServerContext* context, const ::bigtwo::StartGameRequest* request, ::bigtwo::StartGameResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* BigTwoTableService_method_names[] = {
  "/bigtwo.BigTwoTableService/Deal",
  "/bigtwo.BigTwoTableService/ValidatePlay",
  "/bigtwo.BigTwoTableService/HandleTimeout",
  "/bigtwo.BigTwoTableService/Score",
};

std::unique_ptr< BigTwoTableService::Stub> BigTwoTableService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< BigTwoTableService::Stub> stub(new BigTwoTableService::Stub(channel, options));
  return stub;
}

BigTwoTableService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Deal_(BigTwoTableService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ValidatePlay_(BigTwoTableService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_HandleTimeout_(BigTwoTableService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Score_(BigTwoTableService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status BigTwoTableService::Stub::Deal(::grpc::ClientContext* context, const ::bigtwo::DealRequest& request, ::bigtwo::DealResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bigtwo::DealRequest, ::bigtwo::DealResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Deal_, context, request, response);
}

void BigTwoTableService::Stub::async::Deal(::grpc::ClientContext* context, const ::bigtwo::DealRequest* request, ::bigtwo::DealResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bigtwo::DealRequest, ::bigtwo::DealResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Deal_, context, request, response, std::move(f));
}

void BigTwoTableService::Stub::async::Deal(::grpc::ClientContext* context, const ::bigtwo::DealRequest* request, ::bigtwo::DealResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Deal_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bigtwo::DealResponse>* BigTwoTableService::Stub::PrepareAsyncDealRaw(::grpc::ClientContext* context, const ::bigtwo::DealRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bigtwo::DealResponse, ::bigtwo::DealRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Deal_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bigtwo::DealResponse>* BigTwoTableService::Stub::AsyncDealRaw(::grpc::ClientContext* context, const ::bigtwo::DealRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDealRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BigTwoTableService::Stub::ValidatePlay(::grpc::ClientContext* context, const ::bigtwo::PlayValidationRequest& request, ::bigtwo::PlayValidationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bigtwo::PlayValidationRequest, ::bigtwo::PlayValidationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ValidatePlay_, context, request, response);
}

void BigTwoTableService::Stub::async::ValidatePlay(::grpc::ClientContext* context, const ::bigtwo::PlayValidationRequest* request, ::bigtwo::PlayValidationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bigtwo::PlayValidationRequest, ::bigtwo::PlayValidationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ValidatePlay_, context, request, response, std::move(f));
}

void BigTwoTableService::Stub::async::ValidatePlay(::grpc::ClientContext* context, const ::bigtwo::PlayValidationRequest* request, ::bigtwo::PlayValidationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ValidatePlay_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bigtwo::PlayValidationResponse>* BigTwoTableService::Stub::PrepareAsyncValidatePlayRaw(::grpc::ClientContext* context, const ::bigtwo::PlayValidationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bigtwo::PlayValidationResponse, ::bigtwo::PlayValidationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ValidatePlay_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bigtwo::PlayValidationResponse>* BigTwoTableService::Stub::AsyncValidatePlayRaw(::grpc::ClientContext* context, const ::bigtwo::PlayValidationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncValidatePlayRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BigTwoTableService::Stub::HandleTimeout(::grpc::ClientContext* context, const ::bigtwo::TimeoutRequest& request, ::bigtwo::TimeoutResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bigtwo::TimeoutRequest, ::bigtwo::TimeoutResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_HandleTimeout_, context, request, response);
}

void BigTwoTableService::Stub::async::HandleTimeout(::grpc::ClientContext* context, const ::bigtwo::TimeoutRequest* request, ::bigtwo::TimeoutResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bigtwo::TimeoutRequest, ::bigtwo::TimeoutResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HandleTimeout_, context, request, response, std::move(f));
}

void BigTwoTableService::Stub::async::HandleTimeout(::grpc::ClientContext* context, const ::bigtwo::TimeoutRequest* request, ::bigtwo::TimeoutResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HandleTimeout_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bigtwo::TimeoutResponse>* BigTwoTableService::Stub::PrepareAsyncHandleTimeoutRaw(::grpc::ClientContext* context, const ::bigtwo::TimeoutRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bigtwo::TimeoutResponse, ::bigtwo::TimeoutRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_HandleTimeout_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bigtwo::TimeoutResponse>* BigTwoTableService::Stub::AsyncHandleTimeoutRaw(::grpc::ClientContext* context, const ::bigtwo::TimeoutRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHandleTimeoutRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BigTwoTableService::Stub::Score(::grpc::ClientContext* context, const ::bigtwo::ScoreRequest& request, ::bigtwo::ScoreResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bigtwo::ScoreRequest, ::bigtwo::ScoreResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Score_, context, request, response);
}

void BigTwoTableService::Stub::async::Score(::grpc::ClientContext* context, const ::bigtwo::ScoreRequest* request, ::bigtwo::ScoreResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bigtwo::ScoreRequest, ::bigtwo::ScoreResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Score_, context, request, response, std::move(f));
}

void BigTwoTableService::Stub::async::Score(::grpc::ClientContext* context, const ::bigtwo::ScoreRequest* request, ::bigtwo::ScoreResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Score_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bigtwo::ScoreResponse>* BigTwoTableService::Stub::PrepareAsyncScoreRaw(::grpc::ClientContext* context, const ::bigtwo::ScoreRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bigtwo::ScoreResponse, ::bigtwo::ScoreRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Score_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bigtwo::ScoreResponse>* BigTwoTableService::Stub::AsyncScoreRaw(::grpc::ClientContext* context, const ::bigtwo::ScoreRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncScoreRaw(context, request, cq);
  result->StartCall();
  return result;
}

BigTwoTableService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BigTwoTableService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BigTwoTableService::Service, ::bigtwo::DealRequest, ::bigtwo::DealResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BigTwoTableService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bigtwo::DealRequest* req,
             ::bigtwo::DealResponse* resp) {
               return service->Deal(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BigTwoTableService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BigTwoTableService::Service, ::bigtwo::PlayValidationRequest, ::bigtwo::PlayValidationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BigTwoTableService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bigtwo::PlayValidationRequest* req,
             ::bigtwo::PlayValidationResponse* resp) {
               return service->ValidatePlay(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BigTwoTableService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BigTwoTableService::Service, ::bigtwo::TimeoutRequest, ::bigtwo::TimeoutResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BigTwoTableService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bigtwo::TimeoutRequest* req,
             ::bigtwo::TimeoutResponse* resp) {
               return service->HandleTimeout(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BigTwoTableService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BigTwoTableService::Service, ::bigtwo::ScoreRequest, ::bigtwo::ScoreResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BigTwoTableService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bigtwo::ScoreRequest* req,
             ::bigtwo::ScoreResponse* resp) {
               return service->Score(ctx, req, resp);
             }, this)));
}

BigTwoTableService::Service::~Service() {
}

::grpc::Status BigTwoTableService::Service::Deal(::grpc::ServerContext* context, const ::bigtwo::DealRequest* request, ::bigtwo::DealResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BigTwoTableService::Service::ValidatePlay(::grpc::ServerContext* context, const ::bigtwo::PlayValidationRequest* request, ::bigtwo::PlayValidationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BigTwoTableService::Service::HandleTimeout(::grpc::ServerContext* context, const ::bigtwo::TimeoutRequest* request, ::bigtwo::TimeoutResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BigTwoTableService::Service::Score(::grpc::ServerContext* context, const ::bigtwo::ScoreRequest* request, ::bigtwo::ScoreResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* BigTwoManagementService_method_names[] = {
  "/bigtwo.BigTwoManagementService/GetRanking",
  "/bigtwo.BigTwoManagementService/GetPlayerWinRate",
  "/bigtwo.BigTwoManagementService/GetActivityLog",
};

std::unique_ptr< BigTwoManagementService::Stub> BigTwoManagementService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< BigTwoManagementService::Stub> stub(new BigTwoManagementService::Stub(channel, options));
  return stub;
}

BigTwoManagementService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetRanking_(BigTwoManagementService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPlayerWinRate_(BigTwoManagementService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetActivityLog_(BigTwoManagementService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status BigTwoManagementService::Stub::GetRanking(::grpc::ClientContext* context, const ::bigtwo::RankingRequest& request, ::bigtwo::RankingResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bigtwo::RankingRequest, ::bigtwo::RankingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetRanking_, context, request, response);
}

void BigTwoManagementService::Stub::async::GetRanking(::grpc::ClientContext* context, const ::bigtwo::RankingRequest* request, ::bigtwo::RankingResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bigtwo::RankingRequest, ::bigtwo::RankingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRanking_, context, request, response, std::move(f));
}

void BigTwoManagementService::Stub::async::GetRanking(::grpc::ClientContext* context, const ::bigtwo::RankingRequest* request, ::bigtwo::RankingResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRanking_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bigtwo::RankingResponse>* BigTwoManagementService::Stub::PrepareAsyncGetRankingRaw(::grpc::ClientContext* context, const ::bigtwo::RankingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bigtwo::RankingResponse, ::bigtwo::RankingRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetRanking_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bigtwo::RankingResponse>* BigTwoManagementService::Stub::AsyncGetRankingRaw(::grpc::ClientContext* context, const ::bigtwo::RankingRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRankingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BigTwoManagementService::Stub::GetPlayerWinRate(::grpc::ClientContext* context, const ::bigtwo::PlayerRateRequest& request, ::bigtwo::PlayerRateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bigtwo::PlayerRateRequest, ::bigtwo::PlayerRateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPlayerWinRate_, context, request, response);
}

void BigTwoManagementService::Stub::async::GetPlayerWinRate(::grpc::ClientContext* context, const ::bigtwo::PlayerRateRequest* request, ::bigtwo::PlayerRateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bigtwo::PlayerRateRequest, ::bigtwo::PlayerRateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPlayerWinRate_, context, request, response, std::move(f));
}

void BigTwoManagementService::Stub::async::GetPlayerWinRate(::grpc::ClientContext* context, const ::bigtwo::PlayerRateRequest* request, ::bigtwo::PlayerRateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPlayerWinRate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bigtwo::PlayerRateResponse>* BigTwoManagementService::Stub::PrepareAsyncGetPlayerWinRateRaw(::grpc::ClientContext* context, const ::bigtwo::PlayerRateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bigtwo::PlayerRateResponse, ::bigtwo::PlayerRateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPlayerWinRate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bigtwo::PlayerRateResponse>* BigTwoManagementService::Stub::AsyncGetPlayerWinRateRaw(::grpc::ClientContext* context, const ::bigtwo::PlayerRateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPlayerWinRateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BigTwoManagementService::Stub::GetActivityLog(::grpc::ClientContext* context, const ::bigtwo::ActivityLogRequest& request, ::bigtwo::ActivityLogResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bigtwo::ActivityLogRequest, ::bigtwo::ActivityLogResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetActivityLog_, context, request, response);
}

void BigTwoManagementService::Stub::async::GetActivityLog(::grpc::ClientContext* context, const ::bigtwo::ActivityLogRequest* request, ::bigtwo::ActivityLogResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bigtwo::ActivityLogRequest, ::bigtwo::ActivityLogResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetActivityLog_, context, request, response, std::move(f));
}

void BigTwoManagementService::Stub::async::GetActivityLog(::grpc::ClientContext* context, const ::bigtwo::ActivityLogRequest* request, ::bigtwo::ActivityLogResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetActivityLog_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bigtwo::ActivityLogResponse>* BigTwoManagementService::Stub::PrepareAsyncGetActivityLogRaw(::grpc::ClientContext* context, const ::bigtwo::ActivityLogRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bigtwo::ActivityLogResponse, ::bigtwo::ActivityLogRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetActivityLog_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bigtwo::ActivityLogResponse>* BigTwoManagementService::Stub::AsyncGetActivityLogRaw(::grpc::ClientContext* context, const ::bigtwo::ActivityLogRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetActivityLogRaw(context, request, cq);
  result->StartCall();
  return result;
}

BigTwoManagementService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BigTwoManagementService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BigTwoManagementService::Service, ::bigtwo::RankingRequest, ::bigtwo::RankingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BigTwoManagementService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bigtwo::RankingRequest* req,
             ::bigtwo::RankingResponse* resp) {
               return service->GetRanking(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BigTwoManagementService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BigTwoManagementService::Service, ::bigtwo::PlayerRateRequest, ::bigtwo::PlayerRateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BigTwoManagementService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bigtwo::PlayerRateRequest* req,
             ::bigtwo::PlayerRateResponse* resp) {
               return service->GetPlayerWinRate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BigTwoManagementService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BigTwoManagementService::Service, ::bigtwo::ActivityLogRequest, ::bigtwo::ActivityLogResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BigTwoManagementService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bigtwo::ActivityLogRequest* req,
             ::bigtwo::ActivityLogResponse* resp) {
               return service->GetActivityLog(ctx, req, resp);
             }, this)));
}

BigTwoManagementService::Service::~Service() {
}

::grpc::Status BigTwoManagementService::Service::GetRanking(::grpc::ServerContext* context, const ::bigtwo::RankingRequest* request, ::bigtwo::RankingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BigTwoManagementService::Service::GetPlayerWinRate(::grpc::ServerContext* context, const ::bigtwo::PlayerRateRequest* request, ::bigtwo::PlayerRateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BigTwoManagementService::Service::GetActivityLog(::grpc::ServerContext* context, const ::bigtwo::ActivityLogRequest* request, ::bigtwo::ActivityLogResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace bigtwo

